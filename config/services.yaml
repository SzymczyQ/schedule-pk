services:
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # Makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # Controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # Overwritten FOSUserBundle register action
    App\Controller\RegistrationController:
        arguments:
            - '@event_dispatcher'
            - '@fos_user.registration.form.factory'
            - '@FOS\UserBundle\Model\UserManagerInterface'
            - '@security.token_storage'

    # Oauth user manager class
    App\Service\Manager\OAuthUserManager:

    # User provider service
    App\Service\UserProvider:
        arguments:
            - '@fos_user.user_manager'
            - { google: '%env(GOOGLE_ID)%' }
            - '@App\Service\Manager\OAuthUserManager'
